---
title: "Skills Gap Analysis"
---

# Skills Gap Analysis

```{python}
from pyspark.sql import SparkSession


# Start a Spark session
spark = SparkSession.builder.appName("JobPostingsAnalysis").getOrCreate()

# Load the CSV file into a Spark DataFrame
df = spark.read.option("header", "true").option("inferSchema", "true").option("multiLine","true").option("escape", "\"").csv("../data/lightcast_job_postings.csv")


```

```{python}
columns = [
    "COMPANY_NAME", "COMPANY_IS_STAFFING",              # Identification, company
    "POSTED", "EXPIRED", "DURATION", "MODELED_DURATION", # Dates, duration
    "TITLE_NAME", "EMPLOYMENT_TYPE_NAME", "IS_INTERNSHIP", # Job title, contract type
    "CITY_NAME", "STATE_NAME", "REMOTE_TYPE_NAME",       # Geographic
    "MIN_YEARS_EXPERIENCE", "MIN_EDULEVELS_NAME", "EDUCATION_LEVELS_NAME", # Education, experience
    "SALARY",                                             # Salary
    "SKILLS_NAME", "SPECIALIZED_SKILLS_NAME", "SOFTWARE_SKILLS_NAME", # Tech skills
    "COMMON_SKILLS_NAME",                                # Common, soft skills
    "CERTIFICATIONS_NAME"                                # Certif
]


df_columns = df.limit(4000).select([c for c in columns if c in df.columns])
df_columns_pd=df_columns.toPandas()

skill_cols = [
"SKILLS_NAME",
"SPECIALIZED_SKILLS_NAME",
"SOFTWARE_SKILLS_NAME",
"COMMON_SKILLS_NAME",
"CERTIFICATIONS_NAME"
]

df_columns_pd["ALL_SKILLS_RAW"] = df_columns_pd[skill_cols].fillna("").agg(" ".join, axis=1)
df_columns_pd["ALL_SKILLS_RAW"] = (
    df_columns_pd[skill_cols]
    .fillna("")
    .agg(" ".join, axis=1)
    .astype(str)
    .str.replace(r"[{}\[\]'\"]", "", regex=True)      # quita corchetes y comillas
    .str.replace(r"\b[Nn]one\b|nan", "", regex=True)  # quita None/nan
    .str.replace(r"[;|/]", ",", regex=True)           # normaliza separadores
    .str.replace(r"\s*,\s*", ", ", regex=True)        # limpia espacios entre comas
    .str.replace(r"\s{2,}", " ", regex=True)          # elimina espacios dobles
    .str.strip()                                      # quita espacios extra
)
print(df_columns_pd["ALL_SKILLS_RAW"].head(5))
pd.set_option('display.max_colwidth', None); print(df_columns_pd["ALL_SKILLS_RAW"].head(5).to_string(index=False))



# skills text to list.
df_columns_pd["ALL_SKILLS_LIST"] = df_columns_pd["ALL_SKILLS_RAW"].str.split(",")

# list to row
df_skills = df_columns_pd.explode("ALL_SKILLS_LIST")

# Clean up spaces and drop empty rows
df_skills = ( df_skills.dropna(subset=["ALL_SKILLS_LIST"]).loc[df_skills["ALL_SKILLS_LIST"].str.strip() != ""])
df_skills["ALL_SKILLS_LIST"] = ( df_skills["ALL_SKILLS_LIST"] .str.strip() .str.title())

# Count skills
top_skills = (df_skills["ALL_SKILLS_LIST"].value_counts().reset_index().rename(columns={"index": "Skill", "ALL_SKILLS_LIST": "Frequency"}))

# Show top 20
print(top_skills.head(20))

#                                    Frequency  count
# 0                              Communication   3394
# 1                 Sql (Programming Language)   3134
# 2                              Data Analysis   2960
# 3                                 Management   2116
# 4                                 Leadership   2023
# 5              Python (Programming Language)   1837
# 6                                  Dashboard   1791
# 7                            Problem Solving   1788
# 8                            Microsoft Excel   1771
# 9                           Sap Applications   1658
# 10                                Operations   1550
# 11                        Project Management   1528
# 12                          Business Process   1484



# 5 expert, 4 Advanced, 3 Intermediate, 2 Basic Knowledge, 1
top10_skills = [
    "Communication",
    "Sql (Programming Language)",
    "Data Analysis",
    "Management",
    "Leadership",
    "Python (Programming Language)",
    "Dashboard",
    "Problem Solving",
    "Microsoft Excel",
    "Sap Applications"
]

skills_data = {
    "Skill": top10_skills,
    "Julio": [3, 4, 4, 4, 3, 3, 4, 4, 5, 4],
    "Dakota": [4, 4, 4, 3, 5, 3, 5, 4, 5, 3]
}

df_team = pd.DataFrame(skills_data)
df_team


import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(8,5))
sns.heatmap(df_team.set_index("Skill"), annot=True, cmap="coolwarm", linewidths=0.5)
plt.title("Team Skill Levels Heatmap – Julio & Dakota")
plt.show()

# SKILL GAP (Ideal vs our skills)
df_team["Gap_Julio"] = 5 - df_team["Julio"]
df_team["Gap_Dakota"] = 5 - df_team["Dakota"]

# SHOT SKILLS
print(df_team[["Skill", "Julio", "Dakota", "Gap_Julio", "Gap_Dakota"]])


import matplotlib.pyplot as plt
import seaborn as sns

#Melt AND PLOT GAP
df_gaps_melted = df_team.melt(
    id_vars="Skill",
    value_vars=["Gap_Julio", "Gap_Dakota"],
    var_name="Member",
    value_name="Gap"
)

plt.figure(figsize=(9,5))
sns.barplot(data=df_gaps_melted, x="Skill", y="Gap", hue="Member", palette="coolwarm")
plt.title("Skill Gaps Comparison – Julio vs Dakota (Ideal = 5)")
plt.xticks(rotation=45, ha="right")
plt.ylabel("Gap (Difference from Ideal Level 5)")
plt.xlabel("Skill")
plt.legend(title="Team Member")
plt.tight_layout()
plt.show()


```